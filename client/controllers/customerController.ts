/** @format */

import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'

import type { AppState } from '@/controllers/reduxController'
import { License } from '@/helpers/licenseParser'
import { Customer } from 'square'

export interface CustomerState {
  status: 'idle' | 'loading' | 'failed'
  data: Customer | null
  errors?: string[]
}

interface NextApiResponse<T> {
  data?: T
  errors?: string[]
}

const initialState: CustomerState = {
  status: 'idle',
  data: null,
}

const defaultRequest: RequestInit = {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
  },
}

export async function _searchCustomerByLicense(license: License): Promise<NextApiResponse<Customer>> {
  const response = await fetch('/api/customer/search', {
    ...defaultRequest,
    body: JSON.stringify({ license }),
  })

  const result = await response.json()
  return result
}

export async function _createCustomerByLicense(license: License): Promise<NextApiResponse<Customer>> {
  const response = await fetch('/api/customer/create', {
    ...defaultRequest,
    body: JSON.stringify({ license }),
  })

  const result = await response.json()

  return result
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const searchCustomerByLicense = createAsyncThunk('customer/searchCustomerByLicense', async (license: License, thunkAPI) => {
  let res = await _searchCustomerByLicense(license)

  if (!res.data && !res.errors) {
    console.log('Empty result fetching customer. Going to create!')
    thunkAPI.dispatch(createCustomerByLicense(license))
  }

  // The value we return becomes the `fulfilled` action payload
  return res || null
})

export const createCustomerByLicense = createAsyncThunk('customer/createCustomerByLicense', async (license: License) => {
  let res = await _createCustomerByLicense(license)

  return res || null
})

export const customerReducer = createSlice({
  name: 'customer',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    clear: () => initialState,
    create: (state, action: PayloadAction<Customer>) => {
      state.status = 'idle'
      state.data = action.payload
    },
    update: (state, action: PayloadAction<Customer>) => {
      state.status = 'idle'
      state.data = action.payload
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: builder => {
    builder
      .addCase(searchCustomerByLicense.pending, state => {
        state.status = 'loading'
      })
      .addCase(searchCustomerByLicense.fulfilled, (state, action) => {
        state.status = 'idle'
        state.data = action.payload.data
        state.errors = action.payload.errors
      })
      .addCase(createCustomerByLicense.fulfilled, (state, action) => {
        state.status = 'idle'
        state.data = action.payload.data
        state.errors = action.payload.errors
      })
  },
})

export const { clear, update } = customerReducer.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.customer.value)`
export const selectCustomer = (state: AppState) => state.customer

export default customerReducer.reducer
